1:dim(A)
rm(A)
length(NULL)
T & T
diff(1, 5)
diff(c(1, 5))
# Construct eigenvector matrix
A <- cor(res)
dim(A)
# Construct eigenvector matrix
A <- cor(t(res))
dim(A)
P <- sign(eigen(A)$vec)
# Construct eigenvector matrix
A <- cor(t(res))
sum(is.na(A))
# Create residual matrix
#   - dim of matrix is (397, 2066)
#   - rows are each stock
#   - columns are each time point
res <- residual_return(data=logret,
market=list(kospi=kospi, kosdaq=kosdaq),
info=stock_info$market,
window=NULL)
sum(is.na(res))
unique(stock_info$market)
which(stock_info$market)
which(stock_info$market == "none")
dim(logret)
dim(stock_df)
View(stock_info)
stock_info["n"==2075, ]
# ---
# Input file:
#   stock_data.csv
#   stock_name.csv
#   kospi_list.xls
#   kosdaq_list.xls
#   kospi_index.csv
#   kosdaq_index.csv
#
# Output file:
# ---
library(tidyverse)
library(data.table)
library(readxl)
# Load stock data
stock_df <- fread("../data/stock_data.csv")
stock_name <- fread("../data/stock_name.csv")
stock_df <-
stock_df %>%
select(-name) %>%
left_join(stock_name, by="code")
# Load market index
kospi <- fread("../data/kospi_index.csv")
kosdaq <- fread("../data/kosdaq_index.csv")
kospi <- na.omit(kospi)
kosdaq <- na.omit(kosdaq)
# Load market item info
kospi_list <- read_excel("../data/kospi_list.xls")
kosdaq_list <- read_excel("../data/kosdaq_list.xls")
kospi_list$code <- paste0("A", kospi_list$code)
kosdaq_list$code <- paste0("A", kosdaq_list$code)
# Create logreturn feature
stock_df$logreturn <- c(NA, diff(log(stock_df$closing)))
kospi$logreturn <- c(NA, diff(log(kospi$closing)))
kosdaq$logreturn <- c(NA, diff(log(kosdaq$closing)))
# Create stock info data
stock_info <-
stock_df %>%
group_by(code, name) %>%
tally()
stock_info$market <- "none"
stock_info$market[stock_info$code %in% kospi_list$code] <- "kospi"
stock_info$market[stock_info$code %in% kosdaq_list$code] <- "kosdaq"
not_in_market <- stock_info$code[stock_info$market == "none"]
# Create stock info data
stock_info <-
stock_df %>%
group_by(code, name) %>%
tally()
stock_info$market <- "none"
stock_info$market[stock_info$code %in% kospi_list$code] <- "kospi"
stock_info$market[stock_info$code %in% kosdaq_list$code] <- "kosdaq"
not_in_market <- stock_info$code[stock_info$market == "none"]
stock_df <- stock_df %>% filter(!code %in% not_in_market)
stock_info <- stock_info %>% filter(!code %in% not_in_market)
# ---
# Input file:
#   stock_data.csv
#   stock_name.csv
#   kospi_list.xls
#   kosdaq_list.xls
#   kospi_index.csv
#   kosdaq_index.csv
#
# Output file:
# ---
library(tidyverse)
library(data.table)
library(readxl)
# Load stock data
stock_df <- fread("../data/stock_data.csv")
stock_name <- fread("../data/stock_name.csv")
stock_df <-
stock_df %>%
select(-name) %>%
left_join(stock_name, by="code")
# Load market index
kospi <- fread("../data/kospi_index.csv")
kosdaq <- fread("../data/kosdaq_index.csv")
kospi <- na.omit(kospi)
kosdaq <- na.omit(kosdaq)
# Load market item info
kospi_list <- read_excel("../data/kospi_list.xls")
kosdaq_list <- read_excel("../data/kosdaq_list.xls")
kospi_list$code <- paste0("A", kospi_list$code)
kosdaq_list$code <- paste0("A", kosdaq_list$code)
# Create logreturn feature
stock_df$logreturn <- c(NA, diff(log(stock_df$closing)))
kospi$logreturn <- c(NA, diff(log(kospi$closing)))
kosdaq$logreturn <- c(NA, diff(log(kosdaq$closing)))
# Create stock info data
stock_info <-
stock_df %>%
group_by(code, name) %>%
tally()
stock_info$market <- "none"
stock_info$market[stock_info$code %in% kospi_list$code] <- "kospi"
stock_info$market[stock_info$code %in% kosdaq_list$code] <- "kosdaq"
in_market <- stock_info$code[stock_info$market != "none"]
stock_df <- stock_df %>% filter(code %in% in_market)
stock_info <- stock_info %>% filter(code %in% in_market)
# Select full obs data
stock_info <- stock_info %>% filter(n == 2075)
stock_df <- stock_df %>% filter(code %in% stock_info$code)
# Identify all stocks have identical timeset
timeset <- stock_df$time[stock_df$code == stock_info$code[1]]
bool <- TRUE # initialize bool
for (i in 2:nrow(stock_info)) {
bool <- bool * identical(timeset, stock_df$time[stock_df$code == stock_info$code[i]])
if (!bool) stop("discoverd inconsistent timeset.")
}
# Adjust and apply timeset
timeset <-
timeset %>%
intersect(kospi$time) %>%
intersect(kosdaq$time) # warning: set operation returns the unclassed object
timeset <- timeset[-1] # logreturn in the 1st row is NA.
stock_df <- stock_df %>% filter(time %in% timeset)
kospi <- kospi %>% filter(time %in% timeset)
kosdaq <- kosdaq %>% filter(time %in% timeset)
timeset <- as.Date(timeset, origin="1970-01-01")
# Create logreturn matrix
#   - dim of matrix is (397, 2066)
#   - rows are each stock
#   - columns are each time point
nobs <- length(timeset)
logret <- matrix(nrow=nrow(stock_info), ncol=nobs) # initialize logret
for (i in 1:nrow(stock_info)) {
wb <- 1 + (i-1) * nobs
we <- wb + nobs - 1
logret[i, ] <- stock_df$logreturn[wb:we]
}
kospi <- kospi$logreturn
kosdaq <- kosdaq$logreturn
# Set up index of training, validation and test sets
test_idx <- which(year(timeset) >= 2018)
train_idx <- setdiff(1:nobs, test_idx)
val_idx <- intersect(which(year(timeset) >= 2016), train_idx)
tune_idx <- setdiff(train_idx, val_idx)
# Args
n <- 5
# Construct eigenvector matrix
A <- cor(t(res))
residual_return <- function(data, market, info=NULL, window=NULL) {
# Make sure that window is a sequence
if (length(window) == 2 & diff(window) > 1)
window <- window[1]:window[2]
# Use all observation if window is NULL
if (is.null(window))
window <- 1:dim(data)[2]
# Create residual matrix
res <- array(dim=dim(data))
for (mk in names(market)) {
for (i in which(info == mk)) {
lmfit <- lm(data[i, ] ~ market[[mk]])
res[i, window] <- lmfit$residuals
}
}
res
}
# Create residual matrix
#   - dim of matrix is (397, 2066)
#   - rows are each stock
#   - columns are each time point
res <- residual_return(data=logret,
market=list(kospi=kospi, kosdaq=kosdaq),
info=stock_info$market,
window=NULL)
window=NULL
if (length(window) == 2 & diff(window) > 1)
window <- window[1]:window[2]
length(window)
length(window) == 2
residual_return <- function(data, market, info=NULL, window=NULL) {
# Make sure that window is a sequence
if (length(window) == 2 & diff(window) > 1) window <- window[1]:window[2]
# Use all observation if window is NULL
if (is.null(window))
window <- 1:dim(data)[2]
# Create residual matrix
res <- array(dim=dim(data))
for (mk in names(market)) {
for (i in which(info == mk)) {
lmfit <- lm(data[i, ] ~ market[[mk]])
res[i, window] <- lmfit$residuals
}
}
res
}
# Create residual matrix
#   - dim of matrix is (397, 2066)
#   - rows are each stock
#   - columns are each time point
res <- residual_return(data=logret,
market=list(kospi=kospi, kosdaq=kosdaq),
info=stock_info$market,
window=NULL)
if (length(window) == 2 & diff(window) > 1)
1
if (length(window) == 2)
window <- window[1]:window[2]
residual_return <- function(data, market, info=NULL, window=NULL) {
# Make sure that window is a sequence
if (length(window) == 2)
window <- window[1]:window[2]
# Use all observation if window is NULL
if (is.null(window))
window <- 1:dim(data)[2]
# Create residual matrix
res <- array(dim=dim(data))
for (mk in names(market)) {
for (i in which(info == mk)) {
lmfit <- lm(data[i, ] ~ market[[mk]])
res[i, window] <- lmfit$residuals
}
}
res
}
# Create residual matrix
#   - dim of matrix is (397, 2066)
#   - rows are each stock
#   - columns are each time point
res <- residual_return(data=logret,
market=list(kospi=kospi, kosdaq=kosdaq),
info=stock_info$market,
window=NULL)
sum(is.na(res))
# Args
n <- 5
# Construct eigenvector matrix
A <- cor(t(res))
P <- sign(eigen(A)$vec)
P <- P[, 1:n]
P
nobs
# Identify all stocks have identical timeset
nstock <- nrow(stock_info)
# Clustering
stocks <- 1:nstock
cluster_list <- list()
while (!is_empty(stocks)) {
cluster <- NULL
s <- stocks[1]
for (j in stocks) {
if (all(P[s,] * P[j,] == 1)) {
cluster <- union(cluster, j)
stocks <- setdiff(stocks, j)
}
}
cluster_list <- append(cluster_list, list(cluster))
}
cluster_list
length(cluster_list)
# Args
n <- 3
# Construct eigenvector matrix
A <- cor(t(res))
P <- sign(eigen(A)$vec)
P <- P[, 1:n]
# Clustering
stocks <- 1:nstock
cluster_list <- list()
while (!is_empty(stocks)) {
cluster <- NULL
s <- stocks[1]
for (j in stocks) {
if (all(P[s,] * P[j,] == 1)) {
cluster <- union(cluster, j)
stocks <- setdiff(stocks, j)
}
}
cluster_list <- append(cluster_list, list(cluster))
}
cluster_list
length(cluster_list)
M <- matrix(rnorm(25), ncol=5)
P <- eigen(A)$vec
M
P
P <- eigen(A)$vec
P <- eigen(M)$vec
P
P %*% M %*% t(P)
M <- cor(t(res)[, 1:5])
M
P <- eigen(M)$vec
P %*% M %*% t(P)
t(P) %*% M %*% P
t(P) %*% P
P %*% t(P)
?eigen
solve(P) %*% A %*% P
solve(P) %*% M %*% P
eigen(M)$values
r <- eigen(M)
P <- r$vectors
lam <- r$values
P %*% diag(lam) %*% solve(P)
M
P
t(P)
solve(P)
P %*% t(P)
W <- A
D <- diag(apply(W, 1, sum))
dim(D)
sp <- eigen(D - W)
sp$values %>% head()
sp$values %>% tail()
range(A)
W <- A+1
D <- diag(apply(W, 1, sum))
W <- scale(A, center=min(A), scale=max(A)-min(A))
W <- scale(A, center=rep(min(A), ncol(A)), scale=max(A)-min(A))
W <- scale(A, center=rep(min(A), ncol(A)), scale=rep(max(A)-min(A), ncol(A)))
range(W)
D <- diag(apply(W, 1, sum))
sp <- eigen(D - W)
sp$values %>% tail()0
sp$values %>% tail()
V <- sp$vectors
dim(V)
V[, 396]
V[, 395]
x <- 1:10
x[(-1):(-2)]
x[-(1:8)]
x[(-1):8)]
x[(-1):8]
x[0:8]
x[-5:8]
rm(x)
1:10[-1:8]
(1:10)[-1:8]
x <- 1:10
x[-1:8]
x[-(1:8)]
n <- nrow(W)
D <- diag(apply(W, 1, sum))
sp <- eigen(D - W)
V <- sp$vectors
k <- 3
cluster <- kmeans(V[-(1:(n - k))], centers=k)
cluster$cluster
cluster$cluster %>% table()
# k-means
cluster <- kmeans(V[-(1:(n - k))], centers=k)
table(cluster$cluster)
# k-means
cluster <- kmeans(V[-(1:(n - k))], centers=k)
table(cluster$cluster)
# k-means
cluster <- kmeans(V[-(1:(n - k))], centers=k)
table(cluster$cluster)
A <- array(rnorm(1000), dim=c(100, 10))
km <- kmeans(A, centers=4)
table(km$cluster)
# clustering data of rank 3
B <- array(rnorm(5000), dim=c(100, 10, 5))
km <- kmeans(B, centers=4)
table(km$cluster)
?kmeans
kmeans
C <- array(rnorm(100), dim=c(10,5,2))
C
as.matrix(C)
C[1]
C <- array(1:100, dim=c(10,5,2))
C
as.matrix(C)
C
array(C, dim=c(10, 10))
table(km$cluster)
length(km$cluster)
km <- kmeans(A, centers=4)
table(km$cluster)
length(km$cluster)
array(C, dim=c(10, 10))
C
C
C[1,,]
C{2,,]
as.matrix(C)
array(C, dim=c(10, 10))
C{2,,]
as.matrix(C)
array(C, dim=c(10, 10))
C[1,,]
C[2,,]
C[3,,]
array(C, dim=c(10, 10))
weight <- vector(mode=numeric, length=length(w_t)*length(w_f))
w_t <- seq(from=1, by=-0.1, length.out=5)
w_f <- c(2, 1)
weight <- vector(mode=numeric, length=length(w_t)*length(w_f))
?vector
weight <- vector(mode="numeric", length=length(w_t)*length(w_f))
w_t
matrix(rep(w_t, length(w_f)))
matrix(rep(w_t, length(w_f)), ncol=length(w_f))
WT <- matrix(rep(w_t, length(w_f)), ncol=length(w_f))
WT
WT * w_f
WT %*% w_f
WT %*% diag(w_f)
as.vector(WT %*% diag(w_f))
WT <- matrix(rep(w_t, length(w_f)), ncol=length(w_f))
weight <- WT %*% diag(w_f)
weight
C
C[1,,]
C[2,,]
C[3,,]
C[1,,] * weight
C[1,,]
C[1,,] * weight
W <- matrix(rep(w_t, length(w_f)), ncol=length(w_f))
W <- W %*% diag(w_f)
W
scale(1:20)
?scale
ss <- scale(1:20)
class(ss)
ss
mean(1:20)
sd(1:20)
class(C)
class(C[1,,])
C[1,,]
scale(C[1,,])
C[,,1]
scale(C[,,1])
as.vector(C[,,1])
scale(as.vector(C[,,1]))
x <- 1:10
x
dim(x) <- c(5, 2)
x
C[,,1]
scaled <- scale(as.vector(C[,,1]))
dim(scaled) <- c(10, 5)
scaled
?scales
??scales
scale_mat <- function(x, axis) {
origin_dim <- dim(x)
for (i in 1:origin_dim[axis]) {
scaled <- scale(as.vector(x[,,i])) # revise this line!!!
dim(scaled) <- origin_dim[-axis]
x[,,i] <- scaled
}
x
}
C
scale_mat(C)
scale_mat(C, 3)
# clustering data of rank 3
B <- array(rnorm(5000), dim=c(100, 10, 5))
B
# clustering data of rank 3
C <- array(1:100, dim=c(10,5,2))
C
dim(C) <- c(100, 50)
C
dim(C) <- c(10, 10)
C
# clustering data of rank 3
C <- array(1:100, dim=c(10,5,2))
C
dim(C) <- c(10, 10)
C
km <- kmeans(C, centers=4)
table(km$cluster)
length(km$cluster)
C
scale_mat(C, 3)
scale_mat(C, 3)
C <- array(1:100, dim=c(10,5,2))
C
scale_mat(C, 3)
